# Setup docker compose for postgres, pgadmin, redis, celery
# it'd be nice if the postgres container could run the migrations when first initialised

version: '3.3'
services:
  nginx:
    image: nginx:alpine
    depends_on:
      - certbot
      - backend
      - frontend
    links:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/data/certbot/conf:/etc/letsencrypt
      - ./docker/data/certbot/www:/var/www/certbot
      # - ./build:/etc/nginx/html/
      #- /var/audiostreaming/rootfiles/:/rootfiles/
      #- backend_static:/static
      #- backend_media:/media
    #command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - middleware-net

  certbot:
    image: certbot/certbot
    volumes:
      - ./docker/data/certbot/conf:/etc/letsencrypt
      - ./docker/data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - middleware-net

  redis:
    container_name: redis
    image: "redis:6.2-alpine"
    command: redis-server --requirepass $REDIS_PASSWORD
    ports:
      - "6379:6379"
    volumes:
      - "redis_data:/data"
    networks:
      - middleware-net

  postgres:
    container_name: postgres
    image: kartoza/postgis
    restart: always
    environment:
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_DB: $DB_NAME
    ports:
      - 5433:5433
    volumes:
      - "postgres_data:/var/lib/postgresql"
    networks:
      - middleware-net

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_LISTEN_PORT: 5050
      PGADMIN_DEFAULT_EMAIL: $SAFEBEAT_ADMIN_EMAIL
      PGADMIN_DEFAULT_PASSWORD: $SAFEBEAT_ADMIN_PASSWORD
    ports:
      - "5050:5050"
    networks:
      - middleware-net

  frontend:
    container_name: frontend
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ../:/app
    networks:
      - middleware-net
    build:
        context: '../'
        dockerfile: Dockerfile.frontend

  backend:
    container_name: backend
    restart: always
    build:
      context: '../'
    expose:
      - "8000"
    ports:
      - "8000:8000"
    links:
      - "redis:redis"
    volumes:
      - ../:/code
      - backend_static:/static
      - backend_media:/media
    depends_on:
      - postgres
    networks:
      - middleware-net
    env_file:
      - '../.env.development'
    environment:
      DEBUG: 'true'
    command: 'sh -c "/code/docker/entrypoint.sh && exec python3 manage.py runserver 0.0.0.0:8000"'

volumes:
  backend_static:
  backend_media:
  redis_data:
  postgres_data:
  # pg_data:

networks:
  middleware-net:
    driver: bridge
